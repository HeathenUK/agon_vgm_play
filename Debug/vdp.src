; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\vdp.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME2"
;    1	#include <defines.h>
;    2	#include "vdp.h"
;    3	#include "mos-interface.h"
;    4	
;    5	// Generic functions
;    6	
;    7	void write16bit(UINT16 w)
;    8	{
_write16bit:
.DEFINE "_write16bit"

.VALUE _write16bit

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "write16bit",8,"_write16bit"

.LINE 8

.DEFINE "w"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;    9		putch(w & 0xFF); // write LSB
.LINE 9

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   10		putch(w >> 8);	 // write MSB	
.LINE 10

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	BC,HL
	DEC	SP
	PUSH	BC
	INC	SP
	POP	AF
	SEXT	HL
	PUSH	HL
	PUSH	BC
	INC	SP
	POP	BC
	INC	SP
	INC	SP
	PUSH	BC
	CALL	_putch
	POP	BC
;   11	}
.LINE 11

	LD	SP,IX
	POP	IX
	RET	


;**************************** _write16bit ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;w                                     IX+6      2   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "write16bit",11,"_write16bit"
;   12	
;   13	void write32bit(UINT32 l)
;   14	{
_write32bit:
.DEFINE "_write32bit"

.VALUE _write32bit

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "write32bit",14,"_write32bit"

.LINE 14

.DEFINE "l"

.CLASS 65

.VALUE 6

.TYPE 15

.ENDEF

.DEFINE "temp"

.CLASS 65

.VALUE -4

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   15		UINT32 temp = l;
;   16		
;   17		putch(temp & 0xFF); // write LSB
.LINE 17

	LD	HL,(IX+%6)
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   18		temp = temp >> 8;
.LINE 18

	LD	BC,(IX+%7)
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   19		putch(temp & 0xFF);
.LINE 19

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   20		temp = temp >> 8;
.LINE 20

	LD	BC,(IX+%FFFFFFFD)
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   21		putch(temp & 0xFF);
.LINE 21

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   22		temp = temp >> 8;
.LINE 22

	LD	BC,(IX+%FFFFFFFD)
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;   23		putch(temp & 0xFF);
.LINE 23

	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   24		return;	
;   25	}
.LINE 25

	LD	SP,IX
	POP	IX
	RET	


;**************************** _write32bit ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;temp                                  IX-4      4   variable
;l                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "write32bit",25,"_write32bit"
;   26	
;   27	void vdp_mode(unsigned char mode)
;   28	{
_vdp_mode:
.DEFINE "_vdp_mode"

.VALUE _vdp_mode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_mode",28,"_vdp_mode"

.LINE 28

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   29	    putch(22);
.LINE 29

	LD	BC,22
	PUSH	BC
	CALL	_putch
	POP	BC
;   30	    putch(mode);
.LINE 30

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   31	}
.LINE 31

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_mode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;mode                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_mode",31,"_vdp_mode"
;   32	
;   33	void vdp_getMode(void) {
_vdp_getMode:
.DEFINE "_vdp_getMode"

.VALUE _vdp_getMode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_getMode",33,"_vdp_getMode"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   34		putch(23);
.LINE 34

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   35		putch(0);
.LINE 35

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   36		putch(0x86);
.LINE 36

	LD	BC,134
	PUSH	BC
	CALL	_putch
	POP	BC
;   37	}
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_getMode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_getMode",37,"_vdp_getMode"
;   38	
;   39	void vdp_setPaletteColor(UINT8 index, UINT8 color, UINT8 r, UINT8 g, UINT8 b) {
_vdp_setPaletteColor:
.DEFINE "_vdp_setPaletteColor"

.VALUE _vdp_setPaletteColor

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_setPaletteColor",39,"_vdp_setPaletteColor"

.LINE 39

.DEFINE "index"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "color"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 18

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   40		putch(0x13); // VDU palette
.LINE 40

	LD	BC,19
	PUSH	BC
	CALL	_putch
	POP	BC
;   41		putch(index);
.LINE 41

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   42		putch(color); // 255 - set R/G/B colors, or <80 color lookup table
.LINE 42

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   43		putch(r);
.LINE 43

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   44		putch(g);
.LINE 44

	LD	A,(IX+%F)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   45		putch(b);
.LINE 45

	LD	A,(IX+%12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   46	}
.LINE 46

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_setPaletteColor ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;b                                    IX+18      1   parameter
;g                                    IX+15      1   parameter
;r                                    IX+12      1   parameter
;color                                 IX+9      1   parameter
;index                                 IX+6      1   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_setPaletteColor",46,"_vdp_setPaletteColor"
;   47	
;   48	// Text functions
;   49	void vdp_cls()
;   50	{
_vdp_cls:
.DEFINE "_vdp_cls"

.VALUE _vdp_cls

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cls",50,"_vdp_cls"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   51	    putch(12);
.LINE 51

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cls ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cls",52,"_vdp_cls"
;   53	
;   54	void vdp_cursorHome()
;   55	{
_vdp_cursorHome:
.DEFINE "_vdp_cursorHome"

.VALUE _vdp_cursorHome

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorHome",55,"_vdp_cursorHome"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   56	    putch(30);
.LINE 56

	LD	BC,30
	PUSH	BC
	CALL	_putch
	POP	BC
;   57	}
.LINE 57

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorHome ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorHome",57,"_vdp_cursorHome"
;   58	
;   59	void vdp_cursorUp()
;   60	{
_vdp_cursorUp:
.DEFINE "_vdp_cursorUp"

.VALUE _vdp_cursorUp

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorUp",60,"_vdp_cursorUp"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   61	    putch(11);
.LINE 61

	LD	BC,11
	PUSH	BC
	CALL	_putch
	POP	BC
;   62	}
.LINE 62

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorUp ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorUp",62,"_vdp_cursorUp"
;   63	
;   64	void vdp_cursorGoto(unsigned char x, unsigned char y)
;   65	{
_vdp_cursorGoto:
.DEFINE "_vdp_cursorGoto"

.VALUE _vdp_cursorGoto

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorGoto",65,"_vdp_cursorGoto"

.LINE 65

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   66	    putch(31); // TAB
.LINE 66

	LD	BC,31
	PUSH	BC
	CALL	_putch
	POP	BC
;   67	    putch(x);
.LINE 67

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   68	    putch(y);
.LINE 68

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   69	}
.LINE 69

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGoto ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGoto",69,"_vdp_cursorGoto"
;   70	
;   71	void vdp_colour(unsigned char foreground, unsigned char r, unsigned char g, unsigned char b)
;   72	{
_vdp_colour:
.DEFINE "_vdp_colour"

.VALUE _vdp_colour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_colour",72,"_vdp_colour"

.LINE 72

.DEFINE "foreground"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 15

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   73	    putch(17); // COLOUR
.LINE 73

	LD	BC,17
	PUSH	BC
	CALL	_putch
	POP	BC
;   74	    putch(!foreground);
.LINE 74

	LD	A,(IX+%6)
	OR	A,A
	JR	NZ,L_10
	LD	BC,1
	LD	(IX+%FFFFFFFD),BC
	JR	L_11
L_10:
	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
L_11:
	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	CALL	_putch
	POP	BC
;   75	    putch(r);
.LINE 75

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   76	    putch(g);
.LINE 76

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   77	    putch(b);
.LINE 77

	LD	A,(IX+%F)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   78	}
.LINE 78

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_colour ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;temp12                                IX-3      3   variable
;b                                    IX+15      1   parameter
;g                                    IX+12      1   parameter
;r                                     IX+9      1   parameter
;foreground                            IX+6      1   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_colour",78,"_vdp_colour"
;   79	
;   80	void vdp_fgcolour(unsigned char r, unsigned char g, unsigned char b)
;   81	{
_vdp_fgcolour:
.DEFINE "_vdp_fgcolour"

.VALUE _vdp_fgcolour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_fgcolour",81,"_vdp_fgcolour"

.LINE 81

.DEFINE "r"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   82	    vdp_colour(1,r,g,b);
.LINE 82

	LD	C,(IX+%C)
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%9)
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_vdp_colour
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   83	}
.LINE 83

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_fgcolour ***************************
;Name                         Addr/Register   Size   Type
;b                                    IX+12      1   parameter
;g                                     IX+9      1   parameter
;r                                     IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_fgcolour",83,"_vdp_fgcolour"
;   84	
;   85	void vdp_bgcolour(unsigned char r, unsigned char g, unsigned char b)
;   86	{
_vdp_bgcolour:
.DEFINE "_vdp_bgcolour"

.VALUE _vdp_bgcolour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bgcolour",86,"_vdp_bgcolour"

.LINE 86

.DEFINE "r"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   87	    vdp_colour(0,r,g,b);
.LINE 87

	LD	C,(IX+%C)
	LD	B,%0
	PUSH	BC
	LD	C,(IX+%9)
	PUSH	BC
	LD	C,(IX+%6)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_vdp_colour
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   88	}
.LINE 88

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bgcolour ***************************
;Name                         Addr/Register   Size   Type
;b                                    IX+12      1   parameter
;g                                     IX+9      1   parameter
;r                                     IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bgcolour",88,"_vdp_bgcolour"
;   89	
;   90	//
;   91	// Graphics functions
;   92	//
;   93	
;   94	void vdp_clearGraphics()
;   95	{
_vdp_clearGraphics:
.DEFINE "_vdp_clearGraphics"

.VALUE _vdp_clearGraphics

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_clearGraphics",95,"_vdp_clearGraphics"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   96	    putch(16);    
.LINE 96

	LD	BC,16
	PUSH	BC
	CALL	_putch
	POP	BC
;   97	}
.LINE 97

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_clearGraphics ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_clearGraphics",97,"_vdp_clearGraphics"
;   98	
;   99	void vdp_plotColour(unsigned char r, unsigned char g, unsigned char b)
;  100	{
_vdp_plotColour:
.DEFINE "_vdp_plotColour"

.VALUE _vdp_plotColour

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotColour",100,"_vdp_plotColour"

.LINE 100

.DEFINE "r"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "g"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  101	    putch(18); // GCOL
.LINE 101

	LD	BC,18
	PUSH	BC
	CALL	_putch
	POP	BC
;  102	    putch(0);
.LINE 102

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  103	    putch(r);
.LINE 103

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  104	    putch(g);
.LINE 104

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  105	    putch(b);
.LINE 105

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  106	}
.LINE 106

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotColour ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;b                                    IX+12      1   parameter
;g                                     IX+9      1   parameter
;r                                     IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotColour",106,"_vdp_plotColour"
;  107	
;  108	// internal function
;  109	void vdp_plot(unsigned char mode, unsigned int x, unsigned int y)
;  110	{
_vdp_plot:
.DEFINE "_vdp_plot"

.VALUE _vdp_plot

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plot",110,"_vdp_plot"

.LINE 110

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  111	    putch(25); // PLOT
.LINE 111

	LD	BC,25
	PUSH	BC
	CALL	_putch
	POP	BC
;  112	    putch(mode);
.LINE 112

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  113	    putch(x & 0xFF);
.LINE 113

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFF),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFF)
	POP	BC
;  114	    putch(x >> 8);
.LINE 114

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%9)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	PUSH	HL
	CALL	_putch
	POP	BC
;  115	    putch(y & 0xFF);
.LINE 115

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFF),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFF)
	POP	BC
;  116	    putch(y >> 8);
.LINE 116

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%C)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	PUSH	HL
	CALL	_putch
	POP	BC
;  117	}
.LINE 117

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plot ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                    IX+12      3   parameter
;x                                     IX+9      3   parameter
;mode                                  IX+6      1   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plot",117,"_vdp_plot"
;  118	
;  119	void vdp_plotMoveTo(unsigned int x, unsigned int y)
;  120	{
_vdp_plotMoveTo:
.DEFINE "_vdp_plotMoveTo"

.VALUE _vdp_plotMoveTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotMoveTo",120,"_vdp_plotMoveTo"

.LINE 120

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  121		vdp_plot(0x04,x,y);
.LINE 121

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  122	}
.LINE 122

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotMoveTo ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotMoveTo",122,"_vdp_plotMoveTo"
;  123	
;  124	void vdp_plotLineTo(unsigned int x, unsigned int y)
;  125	{
_vdp_plotLineTo:
.DEFINE "_vdp_plotLineTo"

.VALUE _vdp_plotLineTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotLineTo",125,"_vdp_plotLineTo"

.LINE 125

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  126		vdp_plot(0x05,x,y);
.LINE 126

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  127	}
.LINE 127

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotLineTo ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotLineTo",127,"_vdp_plotLineTo"
;  128	
;  129	void vdp_plotPoint(unsigned int x, unsigned int y)
;  130	{
_vdp_plotPoint:
.DEFINE "_vdp_plotPoint"

.VALUE _vdp_plotPoint

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotPoint",130,"_vdp_plotPoint"

.LINE 130

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  131		vdp_plot(0x40,x,y);
.LINE 131

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,64
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  132	}
.LINE 132

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotPoint ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotPoint",132,"_vdp_plotPoint"
;  133	
;  134	void vdp_plotTriangle(unsigned int x, unsigned int y)
;  135	{
_vdp_plotTriangle:
.DEFINE "_vdp_plotTriangle"

.VALUE _vdp_plotTriangle

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotTriangle",135,"_vdp_plotTriangle"

.LINE 135

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  136		vdp_plot(0x50,x,y);
.LINE 136

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  137	}
.LINE 137

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotTriangle ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotTriangle",137,"_vdp_plotTriangle"
;  138	
;  139	void vdp_plotCircleRadius(unsigned int r)
;  140	{
_vdp_plotCircleRadius:
.DEFINE "_vdp_plotCircleRadius"

.VALUE _vdp_plotCircleRadius

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotCircleRadius",140,"_vdp_plotCircleRadius"

.LINE 140

.DEFINE "r"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  141		vdp_plot(0x90,r,0);
.LINE 141

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,144
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  142	}
.LINE 142

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotCircleRadius ***************************
;Name                         Addr/Register   Size   Type
;r                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotCircleRadius",142,"_vdp_plotCircleRadius"
;  143	
;  144	void vdp_plotCircleCircumference(unsigned int x, unsigned int y)
;  145	{
_vdp_plotCircleCircumference:
.DEFINE "_vdp_plotCircleCircumference"

.VALUE _vdp_plotCircleCircumference

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotCircleCircumference",145,"_vdp_plotCircleCircumference"

.LINE 145

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  146		vdp_plot(0x95,x,y);
.LINE 146

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	LD	BC,149
	PUSH	BC
	CALL	_vdp_plot
	POP	BC
	POP	BC
	POP	BC
;  147	}
.LINE 147

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotCircleCircumference ***************************
;Name                         Addr/Register   Size   Type
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotCircleCircumference",147,"_vdp_plotCircleCircumference"
;  148	
;  149	void vdp_plotSetOrigin(unsigned int x, unsigned int y)
;  150	{
_vdp_plotSetOrigin:
.DEFINE "_vdp_plotSetOrigin"

.VALUE _vdp_plotSetOrigin

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_plotSetOrigin",150,"_vdp_plotSetOrigin"

.LINE 150

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  151	    putch(29); //Graphics ORIGIN
.LINE 151

	LD	BC,29
	PUSH	BC
	CALL	_putch
	POP	BC
;  152	    putch(x & 0xF);
.LINE 152

	LD	A,(IX+%6)
	AND	A,%F
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFF),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFF)
	POP	BC
;  153	    putch(x >> 8);
.LINE 153

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%6)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	PUSH	HL
	CALL	_putch
	POP	BC
;  154	    putch(y & 0xF);
.LINE 154

	LD	A,(IX+%9)
	AND	A,%F
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	(IX+%FFFFFFFF),A
	CALL	_putch
	LD	A,(IX+%FFFFFFFF)
	POP	BC
;  155	    putch(y >> 8);
.LINE 155

	UEXT	HL
	PUSH	HL
	LD	HL,(IX+%9)
	PUSH	HL
	INC	SP
	POP	HL
	INC	SP
	INC	SP
	PUSH	HL
	CALL	_putch
	POP	BC
;  156	}
.LINE 156

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_plotSetOrigin ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_plotSetOrigin",156,"_vdp_plotSetOrigin"
;  157	
;  158	// Bitmap VDP functions
;  159	void vdp_bitmapSelect(UINT8 id)
;  160	{
_vdp_bitmapSelect:
.DEFINE "_vdp_bitmapSelect"

.VALUE _vdp_bitmapSelect

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSelect",160,"_vdp_bitmapSelect"

.LINE 160

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  161		putch(23); // vdu_sys
.LINE 161

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  162		putch(27); // sprite command
.LINE 162

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  163		putch(0);  // select command
.LINE 163

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  164		putch(id); // bitmap_id
.LINE 164

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  165		return;	
;  166	}
.LINE 166

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSelect ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSelect",166,"_vdp_bitmapSelect"
;  167	
;  168	void vdp_bitmapSendDataSelected(UINT16 width, UINT16 height, UINT32 *data)
;  169	{
_vdp_bitmapSendDataSelected:
.DEFINE "_vdp_bitmapSendDataSelected"

.VALUE _vdp_bitmapSendDataSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSendDataSelected",169,"_vdp_bitmapSendDataSelected"

.LINE 169

.DEFINE "width"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "data"

.CLASS 65

.VALUE 12

.TYPE 47

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  170		UINT16 n;
;  171		
;  172		putch(23); // vdu_sys
.LINE 172

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  173		putch(27); // sprite command
.LINE 173

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  174		putch(1);  // send data to selected bitmap
.LINE 174

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  175		
;  176		write16bit(width);
.LINE 176

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  177		write16bit(height);
.LINE 177

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  178		
;  179		for(n = 0; n < (width*height); n++)
.LINE 179

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_30
L_28:
;  180		{
;  181			write32bit(data[n]);
.LINE 181

	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+%C)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY)
	LD	A,(IY+%3)
	LD	H,%0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	_write32bit
	POP	BC
	POP	BC
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
;  182			//delayms(1);
;  183		}
L_30:
.LINE 183

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	DE,HL
	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	CALL	__imuls
	LD	DE,HL
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	JP	M,L_28
;  184		return;		
;  185	}
.LINE 185

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSendDataSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;n                                     IX-2      2   variable
;data                                 IX+12      3   parameter
;height                                IX+9      2   parameter
;width                                 IX+6      2   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSendDataSelected",185,"_vdp_bitmapSendDataSelected"
;  186	
;  187	void vdp_bitmapSendData(UINT8 id, UINT16 width, UINT16 height, UINT32 *data)
;  188	{
_vdp_bitmapSendData:
.DEFINE "_vdp_bitmapSendData"

.VALUE _vdp_bitmapSendData

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapSendData",188,"_vdp_bitmapSendData"

.LINE 188

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "data"

.CLASS 65

.VALUE 15

.TYPE 47

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  189		vdp_bitmapSelect(id);
.LINE 189

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  190		vdp_bitmapSendDataSelected(width, height, data);
.LINE 190

	LD	BC,(IX+%F)
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapSendDataSelected
	POP	BC
	POP	BC
	POP	BC
;  191		return;	
;  192	}
.LINE 192

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapSendData ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapSendDataSelected         IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;data                                 IX+15      3   parameter
;height                               IX+12      2   parameter
;width                                 IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapSendData",192,"_vdp_bitmapSendData"
;  193	
;  194	void vdp_bitmapDrawSelected(UINT16 x, UINT16 y)
;  195	{
_vdp_bitmapDrawSelected:
.DEFINE "_vdp_bitmapDrawSelected"

.VALUE _vdp_bitmapDrawSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapDrawSelected",195,"_vdp_bitmapDrawSelected"

.LINE 195

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  196		putch(23); // vdu_sys
.LINE 196

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  197		putch(27); // sprite command
.LINE 197

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  198		putch(3);  // draw selected bitmap
.LINE 198

	LD	BC,3
	PUSH	BC
	CALL	_putch
	POP	BC
;  199		
;  200		write16bit(x);
.LINE 200

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  201		write16bit(y);
.LINE 201

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  202		
;  203		return;
;  204	}
.LINE 204

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapDrawSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapDrawSelected",204,"_vdp_bitmapDrawSelected"
;  205	
;  206	void vdp_bitmapDraw(UINT8 id, UINT16 x, UINT16 y)
;  207	{
_vdp_bitmapDraw:
.DEFINE "_vdp_bitmapDraw"

.VALUE _vdp_bitmapDraw

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapDraw",207,"_vdp_bitmapDraw"

.LINE 207

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  208		vdp_bitmapSelect(id);
.LINE 208

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  209		vdp_bitmapDrawSelected(x,y);
.LINE 209

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapDrawSelected
	POP	BC
	POP	BC
;  210		return;	
;  211	}
.LINE 211

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapDraw ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapDrawSelected             IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapDraw",211,"_vdp_bitmapDraw"
;  212	
;  213	void vdp_bitmapCreateSolidColorSelected(UINT16 width, UINT16 height, UINT32 abgr)
;  214	{
_vdp_bitmapCreateSolidColorSelected:
.DEFINE "_vdp_bitmapCreateSolidColorSelected"

.VALUE _vdp_bitmapCreateSolidColorSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapCreateSolidColorSelected",214,"_vdp_bitmapCreateSolidColorSelected"

.LINE 214

.DEFINE "width"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "abgr"

.CLASS 65

.VALUE 12

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  215		putch(23); // vdu_sys
.LINE 215

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  216		putch(27); // sprite command
.LINE 216

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  217		putch(2);  // define in single color command
.LINE 217

	LD	BC,2
	PUSH	BC
	CALL	_putch
	POP	BC
;  218		
;  219		write16bit(width);
.LINE 219

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  220		write16bit(height);
.LINE 220

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  221		write32bit(abgr);
.LINE 221

	LD	C,(IX+%F)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	CALL	_write32bit
	POP	BC
	POP	BC
;  222		return;		
;  223	}
.LINE 223

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapCreateSolidColorSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;abgr                                 IX+12      4   parameter
;height                                IX+9      2   parameter
;width                                 IX+6      2   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapCreateSolidColorSelected",223,"_vdp_bitmapCreateSolidColorSelected"
;  224	
;  225	void vdp_bitmapCreateSolidColor(UINT8 id, UINT16 width, UINT16 height, UINT32 abgr)
;  226	{
_vdp_bitmapCreateSolidColor:
.DEFINE "_vdp_bitmapCreateSolidColor"

.VALUE _vdp_bitmapCreateSolidColor

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_bitmapCreateSolidColor",226,"_vdp_bitmapCreateSolidColor"

.LINE 226

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "width"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "height"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

.DEFINE "abgr"

.CLASS 65

.VALUE 15

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  227		vdp_bitmapSelect(id);
.LINE 227

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_bitmapSelect
	POP	BC
;  228		vdp_bitmapCreateSolidColorSelected(width, height, abgr);
.LINE 228

	LD	C,(IX+%12)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%F)
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_bitmapCreateSolidColorSelected
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229		return;	
;  230	}
.LINE 230

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_bitmapCreateSolidColor ***************************
;Name                         Addr/Register   Size   Type
;_vdp_bitmapCreateSolidColorSelected      IMPORT  -----   function
;_vdp_bitmapSelect                   IMPORT  -----   function
;abgr                                 IX+15      4   parameter
;height                               IX+12      2   parameter
;width                                 IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_bitmapCreateSolidColor",230,"_vdp_bitmapCreateSolidColor"
;  231	
;  232	// Sprite VDP functions
;  233	void vdp_spriteSelect(UINT8 id)
;  234	{
_vdp_spriteSelect:
.DEFINE "_vdp_spriteSelect"

.VALUE _vdp_spriteSelect

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSelect",234,"_vdp_spriteSelect"

.LINE 234

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  235		putch(23); // vdu_sys
.LINE 235

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  236		putch(27); // sprite command
.LINE 236

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  237		putch(4);  // select sprite
.LINE 237

	LD	BC,4
	PUSH	BC
	CALL	_putch
	POP	BC
;  238		putch(id);
.LINE 238

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  239		return;			
;  240	}
.LINE 240

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSelect ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSelect",240,"_vdp_spriteSelect"
;  241	
;  242	void vdp_spriteClearFramesSelected(void)
;  243	{
_vdp_spriteClearFramesSelected:
.DEFINE "_vdp_spriteClearFramesSelected"

.VALUE _vdp_spriteClearFramesSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteClearFramesSelected",243,"_vdp_spriteClearFramesSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  244		putch(23); // vdu_sys
.LINE 244

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  245		putch(27); // sprite command
.LINE 245

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  246		putch(5);  // clear frames
.LINE 246

	LD	BC,5
	PUSH	BC
	CALL	_putch
	POP	BC
;  247		return;				
;  248	}
.LINE 248

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteClearFramesSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteClearFramesSelected",248,"_vdp_spriteClearFramesSelected"
;  249	
;  250	void vdp_spriteClearFrames(UINT8 bitmapid)
;  251	{
_vdp_spriteClearFrames:
.DEFINE "_vdp_spriteClearFrames"

.VALUE _vdp_spriteClearFrames

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteClearFrames",251,"_vdp_spriteClearFrames"

.LINE 251

.DEFINE "bitmapid"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  252		vdp_spriteSelect(bitmapid);
.LINE 252

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  253		vdp_spriteClearFramesSelected();
.LINE 253

	CALL	_vdp_spriteClearFramesSelected
;  254		return;				
;  255	}
.LINE 255

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteClearFrames ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteClearFramesSelected      IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;bitmapid                              IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteClearFrames",255,"_vdp_spriteClearFrames"
;  256	
;  257	void vdp_spriteAddFrameSelected(UINT8 bitmapid)
;  258	{
_vdp_spriteAddFrameSelected:
.DEFINE "_vdp_spriteAddFrameSelected"

.VALUE _vdp_spriteAddFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteAddFrameSelected",258,"_vdp_spriteAddFrameSelected"

.LINE 258

.DEFINE "bitmapid"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  259		putch(23); // vdu_sys
.LINE 259

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  260		putch(27); // sprite command
.LINE 260

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  261		putch(6);  // add frame
.LINE 261

	LD	BC,6
	PUSH	BC
	CALL	_putch
	POP	BC
;  262		putch(bitmapid);
.LINE 262

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  263		return;	
;  264	}
.LINE 264

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteAddFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;bitmapid                              IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteAddFrameSelected",264,"_vdp_spriteAddFrameSelected"
;  265	
;  266	void vdp_spriteAddFrame(UINT8 id, UINT8 bitmapid)
;  267	{
_vdp_spriteAddFrame:
.DEFINE "_vdp_spriteAddFrame"

.VALUE _vdp_spriteAddFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteAddFrame",267,"_vdp_spriteAddFrame"

.LINE 267

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "bitmapid"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  268		vdp_spriteSelect(id);
.LINE 268

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  269		vdp_spriteAddFrameSelected(bitmapid);
.LINE 269

	LD	C,(IX+%9)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteAddFrameSelected
	POP	BC
;  270		return;	
;  271	}
.LINE 271

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteAddFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteAddFrameSelected         IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;bitmapid                              IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteAddFrame",271,"_vdp_spriteAddFrame"
;  272	
;  273	void vdp_spriteNextFrameSelected(void)
;  274	{
_vdp_spriteNextFrameSelected:
.DEFINE "_vdp_spriteNextFrameSelected"

.VALUE _vdp_spriteNextFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteNextFrameSelected",274,"_vdp_spriteNextFrameSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  275		putch(23); // vdu_sys
.LINE 275

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  276		putch(27); // sprite command
.LINE 276

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  277		putch(8);  // next frame
.LINE 277

	LD	BC,8
	PUSH	BC
	CALL	_putch
	POP	BC
;  278		return;			
;  279	}
.LINE 279

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteNextFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteNextFrameSelected",279,"_vdp_spriteNextFrameSelected"
;  280	
;  281	void vdp_spriteNextFrame(UINT8 id)
;  282	{
_vdp_spriteNextFrame:
.DEFINE "_vdp_spriteNextFrame"

.VALUE _vdp_spriteNextFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteNextFrame",282,"_vdp_spriteNextFrame"

.LINE 282

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  283		vdp_spriteSelect(id);
.LINE 283

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  284		vdp_spriteNextFrameSelected();
.LINE 284

	CALL	_vdp_spriteNextFrameSelected
;  285		return;
;  286	}
.LINE 286

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteNextFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteNextFrameSelected        IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteNextFrame",286,"_vdp_spriteNextFrame"
;  287	
;  288	void vdp_spritePreviousFrameSelected(void)
;  289	{
_vdp_spritePreviousFrameSelected:
.DEFINE "_vdp_spritePreviousFrameSelected"

.VALUE _vdp_spritePreviousFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spritePreviousFrameSelected",289,"_vdp_spritePreviousFrameSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  290		putch(23); // vdu_sys
.LINE 290

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  291		putch(27); // sprite command
.LINE 291

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  292		putch(9); // previous frame
.LINE 292

	LD	BC,9
	PUSH	BC
	CALL	_putch
	POP	BC
;  293		return;	
;  294	}
.LINE 294

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spritePreviousFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spritePreviousFrameSelected",294,"_vdp_spritePreviousFrameSelected"
;  295	
;  296	void vdp_spritePreviousFrame(UINT8 id)
;  297	{
_vdp_spritePreviousFrame:
.DEFINE "_vdp_spritePreviousFrame"

.VALUE _vdp_spritePreviousFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spritePreviousFrame",297,"_vdp_spritePreviousFrame"

.LINE 297

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  298		vdp_spriteSelect(id);
.LINE 298

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  299		vdp_spritePreviousFrameSelected();
.LINE 299

	CALL	_vdp_spritePreviousFrameSelected
;  300		return;
;  301	}
.LINE 301

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spritePreviousFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spritePreviousFrameSelected      IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spritePreviousFrame",301,"_vdp_spritePreviousFrame"
;  302	
;  303	void vdp_spriteSetFrameSelected(UINT8 framenumber)
;  304	{
_vdp_spriteSetFrameSelected:
.DEFINE "_vdp_spriteSetFrameSelected"

.VALUE _vdp_spriteSetFrameSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSetFrameSelected",304,"_vdp_spriteSetFrameSelected"

.LINE 304

.DEFINE "framenumber"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  305		putch(23); // vdu_sys
.LINE 305

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  306		putch(27); // sprite command
.LINE 306

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  307		putch(10); // set current frame
.LINE 307

	LD	BC,10
	PUSH	BC
	CALL	_putch
	POP	BC
;  308		putch(framenumber);
.LINE 308

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  309		return;	
;  310	}
.LINE 310

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSetFrameSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;framenumber                           IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSetFrameSelected",310,"_vdp_spriteSetFrameSelected"
;  311	
;  312	void vdp_spriteSetFrame(UINT8 id, UINT8 framenumber)
;  313	{
_vdp_spriteSetFrame:
.DEFINE "_vdp_spriteSetFrame"

.VALUE _vdp_spriteSetFrame

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteSetFrame",313,"_vdp_spriteSetFrame"

.LINE 313

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "framenumber"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  314		vdp_spriteSelect(id);
.LINE 314

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  315		vdp_spriteSetFrameSelected(framenumber);
.LINE 315

	LD	C,(IX+%9)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSetFrameSelected
	POP	BC
;  316		return;
;  317	}
.LINE 317

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteSetFrame ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteSetFrameSelected         IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;framenumber                           IX+9      1   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteSetFrame",317,"_vdp_spriteSetFrame"
;  318	
;  319	void vdp_spriteShowSelected(void)
;  320	{
_vdp_spriteShowSelected:
.DEFINE "_vdp_spriteShowSelected"

.VALUE _vdp_spriteShowSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteShowSelected",320,"_vdp_spriteShowSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  321		putch(23); // vdu_sys
.LINE 321

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  322		putch(27); // sprite command
.LINE 322

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  323		putch(11); // show sprite
.LINE 323

	LD	BC,11
	PUSH	BC
	CALL	_putch
	POP	BC
;  324		return;			
;  325	}
.LINE 325

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteShowSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteShowSelected",325,"_vdp_spriteShowSelected"
;  326	
;  327	void vdp_spriteShow(UINT8 id)
;  328	{
_vdp_spriteShow:
.DEFINE "_vdp_spriteShow"

.VALUE _vdp_spriteShow

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteShow",328,"_vdp_spriteShow"

.LINE 328

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  329		vdp_spriteSelect(id);
.LINE 329

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  330		vdp_spriteShowSelected();
.LINE 330

	CALL	_vdp_spriteShowSelected
;  331		return;
;  332	}
.LINE 332

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteShow ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteShowSelected             IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteShow",332,"_vdp_spriteShow"
;  333	
;  334	void vdp_spriteHideSelected(void)
;  335	{
_vdp_spriteHideSelected:
.DEFINE "_vdp_spriteHideSelected"

.VALUE _vdp_spriteHideSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteHideSelected",335,"_vdp_spriteHideSelected"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  336		putch(23); // vdu_sys
.LINE 336

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  337		putch(27); // sprite command
.LINE 337

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  338		putch(12); // hide sprite
.LINE 338

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  339		return;		
;  340	}
.LINE 340

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteHideSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteHideSelected",340,"_vdp_spriteHideSelected"
;  341	
;  342	void vdp_spriteHide(UINT8 id)
;  343	{
_vdp_spriteHide:
.DEFINE "_vdp_spriteHide"

.VALUE _vdp_spriteHide

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteHide",343,"_vdp_spriteHide"

.LINE 343

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  344		vdp_spriteSelect(id);
.LINE 344

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  345		vdp_spriteHideSelected();
.LINE 345

	CALL	_vdp_spriteHideSelected
;  346		return;
;  347	}
.LINE 347

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteHide ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteHideSelected             IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;id                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteHide",347,"_vdp_spriteHide"
;  348	
;  349	void vdp_spriteMoveToSelected(UINT16 x, UINT16 y)
;  350	{
_vdp_spriteMoveToSelected:
.DEFINE "_vdp_spriteMoveToSelected"

.VALUE _vdp_spriteMoveToSelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveToSelected",350,"_vdp_spriteMoveToSelected"

.LINE 350

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  351		putch(23); // vdu_sys
.LINE 351

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  352		putch(27); // sprite command
.LINE 352

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  353		putch(13); // move to
.LINE 353

	LD	BC,13
	PUSH	BC
	CALL	_putch
	POP	BC
;  354		write16bit(x);
.LINE 354

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  355		write16bit(y);
.LINE 355

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  356		return;	
;  357	}
.LINE 357

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveToSelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveToSelected",357,"_vdp_spriteMoveToSelected"
;  358	
;  359	void vdp_spriteMoveTo(UINT8 id, UINT16 x, UINT16 y)
;  360	{
_vdp_spriteMoveTo:
.DEFINE "_vdp_spriteMoveTo"

.VALUE _vdp_spriteMoveTo

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveTo",360,"_vdp_spriteMoveTo"

.LINE 360

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  361		vdp_spriteSelect(id);
.LINE 361

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  362		vdp_spriteMoveToSelected(x,y);
.LINE 362

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_spriteMoveToSelected
	POP	BC
	POP	BC
;  363		return;
;  364	}
.LINE 364

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveTo ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteMoveToSelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveTo",364,"_vdp_spriteMoveTo"
;  365	
;  366	void vdp_spriteMoveBySelected(UINT16 x, UINT16 y)
;  367	{
_vdp_spriteMoveBySelected:
.DEFINE "_vdp_spriteMoveBySelected"

.VALUE _vdp_spriteMoveBySelected

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveBySelected",367,"_vdp_spriteMoveBySelected"

.LINE 367

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  368		putch(23); // vdu_sys
.LINE 368

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  369		putch(27); // sprite command
.LINE 369

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  370		putch(14); // move by
.LINE 370

	LD	BC,14
	PUSH	BC
	CALL	_putch
	POP	BC
;  371		write16bit(x);
.LINE 371

	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  372		write16bit(y);
.LINE 372

	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_write16bit
	POP	BC
;  373		return;	
;  374	}
.LINE 374

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveBySelected ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveBySelected",374,"_vdp_spriteMoveBySelected"
;  375	
;  376	void vdp_spriteMoveBy(UINT8 id, UINT16 x, UINT16 y)
;  377	{
_vdp_spriteMoveBy:
.DEFINE "_vdp_spriteMoveBy"

.VALUE _vdp_spriteMoveBy

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteMoveBy",377,"_vdp_spriteMoveBy"

.LINE 377

.DEFINE "id"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 12

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  378		vdp_spriteSelect(id);
.LINE 378

	LD	C,(IX+%6)
	LD	B,%0
	PUSH	BC
	CALL	_vdp_spriteSelect
	POP	BC
;  379		vdp_spriteMoveBySelected(x,y);
.LINE 379

	LD	BC,(IX+%C)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	_vdp_spriteMoveBySelected
	POP	BC
	POP	BC
;  380		return;
;  381	}
.LINE 381

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteMoveBy ***************************
;Name                         Addr/Register   Size   Type
;_vdp_spriteMoveBySelected           IMPORT  -----   function
;_vdp_spriteSelect                   IMPORT  -----   function
;y                                    IX+12      2   parameter
;x                                     IX+9      2   parameter
;id                                    IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteMoveBy",381,"_vdp_spriteMoveBy"
;  382	
;  383	void vdp_spriteActivateTotal(UINT8 number)
;  384	{
_vdp_spriteActivateTotal:
.DEFINE "_vdp_spriteActivateTotal"

.VALUE _vdp_spriteActivateTotal

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteActivateTotal",384,"_vdp_spriteActivateTotal"

.LINE 384

.DEFINE "number"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  385		putch(23); // vdu_sys
.LINE 385

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  386		putch(27); // sprite command
.LINE 386

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  387		putch(7);  // set number of sprites
.LINE 387

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;  388		putch(number);
.LINE 388

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  389		return;	
;  390	}
.LINE 390

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteActivateTotal ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;number                                IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteActivateTotal",390,"_vdp_spriteActivateTotal"
;  391	
;  392	void vdp_spriteRefresh(void)
;  393	{
_vdp_spriteRefresh:
.DEFINE "_vdp_spriteRefresh"

.VALUE _vdp_spriteRefresh

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_spriteRefresh",393,"_vdp_spriteRefresh"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  394		putch(23);	// vdu_sys
.LINE 394

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  395		putch(27);	// sprite command
.LINE 395

	LD	BC,27
	PUSH	BC
	CALL	_putch
	POP	BC
;  396		putch(15);	// refresh all sprites
.LINE 396

	LD	BC,15
	PUSH	BC
	CALL	_putch
	POP	BC
;  397		return;
;  398	}
.LINE 398

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_spriteRefresh ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_spriteRefresh",398,"_vdp_spriteRefresh"
;  399	
;  400	UINT8 vdp_cursorGetXpos(void)
;  401	{
_vdp_cursorGetXpos:
.DEFINE "_vdp_cursorGetXpos"

.VALUE _vdp_cursorGetXpos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_cursorGetXpos",401,"_vdp_cursorGetXpos"

.LINE 401

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  402		unsigned int delay;
;  403		
;  404		putch(23);	// VDP command
.LINE 404

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  405		putch(0);	// VDP command
.LINE 405

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  406		putch(0x82);	// Request cursor position
.LINE 406

	LD	BC,130
	PUSH	BC
	CALL	_putch
	POP	BC
;  407		
;  408		delay = 255;
.LINE 408

	LD	BC,255
	LD	(IX+%FFFFFFFD),BC
;  409		while(delay--);
L_61:
.LINE 409

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_61
;  410		return(getsysvar_cursorX());
.LINE 410

	CALL	_getsysvar_cursorX
;  411	
;  412	}
.LINE 412

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGetXpos ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_cursorX                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGetXpos",412,"_vdp_cursorGetXpos"
;  413	
;  414	UINT8 vdp_cursorGetYpos(void)
;  415	{
_vdp_cursorGetYpos:
.DEFINE "_vdp_cursorGetYpos"

.VALUE _vdp_cursorGetYpos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_cursorGetYpos",415,"_vdp_cursorGetYpos"

.LINE 415

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  416		unsigned int delay;
;  417		
;  418		putch(23);	// VDP command
.LINE 418

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  419		putch(0);	// VDP command
.LINE 419

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  420		putch(0x82);	// Request cursor position
.LINE 420

	LD	BC,130
	PUSH	BC
	CALL	_putch
	POP	BC
;  421		
;  422		delay = 255;
.LINE 422

	LD	BC,255
	LD	(IX+%FFFFFFFD),BC
;  423		while(delay--);
L_66:
.LINE 423

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_66
;  424		return(getsysvar_cursorY());
.LINE 424

	CALL	_getsysvar_cursorY
;  425	}
.LINE 425

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorGetYpos ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_cursorY                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorGetYpos",425,"_vdp_cursorGetYpos"
;  426	
;  427	char vdp_asciiCodeAt(unsigned char x, unsigned char y)
;  428	{
_vdp_asciiCodeAt:
.DEFINE "_vdp_asciiCodeAt"

.VALUE _vdp_asciiCodeAt

.CLASS 2

.TYPE 66

.ENDEF

.BEGFUNC "vdp_asciiCodeAt",428,"_vdp_asciiCodeAt"

.LINE 428

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "delay"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  429		unsigned int delay;
;  430		
;  431		putch(23);	// VDP command
.LINE 431

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  432		putch(0);	// VDP command
.LINE 432

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  433		putch(0x83);	// Request ascii code at position (x,y)
.LINE 433

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;  434		putch(x);
.LINE 434

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  435		putch(0);
.LINE 435

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  436		putch(y);
.LINE 436

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  437		putch(0);
.LINE 437

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  438		
;  439		delay = 64000;
.LINE 439

	LD	BC,64000
	LD	(IX+%FFFFFFFD),BC
;  440		while(delay--);
L_71:
.LINE 440

	LD	HL,(IX+%FFFFFFFD)
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_71
;  441		return(getsysvar_scrchar());
.LINE 441

	CALL	_getsysvar_scrchar
;  442	}
.LINE 442

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_asciiCodeAt ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_scrchar                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;delay                                 IX-3      3   variable
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_asciiCodeAt",442,"_vdp_asciiCodeAt"
;  443	
;  444	void  vdp_setpagedMode(bool mode) {
_vdp_setpagedMode:
.DEFINE "_vdp_setpagedMode"

.VALUE _vdp_setpagedMode

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_setpagedMode",444,"_vdp_setpagedMode"

.LINE 444

.DEFINE "mode"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  445		if(mode) putch(0x0E);
.LINE 445

	LD	A,(IX+%6)
	OR	A,A
	JR	Z,L_75
	LD	BC,14
	PUSH	BC
	CALL	_putch
	POP	BC
;  446		else putch(0x0F);
.LINE 446

	JR	L_76
L_75:
	LD	BC,15
	PUSH	BC
	CALL	_putch
	POP	BC
;  447	}
L_76:
.LINE 447

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_setpagedMode ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;mode                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_setpagedMode",447,"_vdp_setpagedMode"
;  448	
;  449	void vdp_cursorDisable(void)
;  450	{
_vdp_cursorDisable:
.DEFINE "_vdp_cursorDisable"

.VALUE _vdp_cursorDisable

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorDisable",450,"_vdp_cursorDisable"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  451		putch(23);
.LINE 451

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  452		putch(1);
.LINE 452

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  453		putch(0);
.LINE 453

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  454	}
.LINE 454

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorDisable ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorDisable",454,"_vdp_cursorDisable"
;  455	
;  456	void vdp_cursorEnable(void)
;  457	{
_vdp_cursorEnable:
.DEFINE "_vdp_cursorEnable"

.VALUE _vdp_cursorEnable

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_cursorEnable",457,"_vdp_cursorEnable"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  458		putch(23);
.LINE 458

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  459		putch(1);
.LINE 459

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  460		putch(1);
.LINE 460

	LD	BC,1
	PUSH	BC
	CALL	_putch
	POP	BC
;  461	}
.LINE 461

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_cursorEnable ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_cursorEnable",461,"_vdp_cursorEnable"
;  462	
;  463	void vdp_scroll(unsigned char extent, unsigned char direction, unsigned char speed)
;  464	{
_vdp_scroll:
.DEFINE "_vdp_scroll"

.VALUE _vdp_scroll

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vdp_scroll",464,"_vdp_scroll"

.LINE 464

.DEFINE "extent"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "direction"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "speed"

.CLASS 65

.VALUE 12

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  465		putch(23);
.LINE 465

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  466		putch(7);	// scroll
.LINE 466

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;  467		putch(extent);
.LINE 467

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  468		putch(direction);
.LINE 468

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  469		putch(speed);
.LINE 469

	LD	A,(IX+%C)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
.LINE 470

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_scroll ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;speed                                IX+12      1   parameter
;direction                             IX+9      1   parameter
;extent                                IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_scroll",470,"_vdp_scroll"
	XREF _getsysvar_scrchar:ROM
	XREF _getsysvar_cursorY:ROM
	XREF _getsysvar_cursorX:ROM
	XREF _putch:ROM
	XREF __imuls:ROM
	XREF __stoiu:ROM
	XDEF _vdp_scroll
	XDEF _vdp_cursorEnable
	XDEF _vdp_cursorDisable
	XDEF _vdp_setpagedMode
	XDEF _vdp_asciiCodeAt
	XDEF _vdp_cursorGetYpos
	XDEF _vdp_cursorGetXpos
	XDEF _vdp_spriteRefresh
	XDEF _vdp_spriteActivateTotal
	XDEF _vdp_spriteMoveBy
	XDEF _vdp_spriteMoveBySelected
	XDEF _vdp_spriteMoveTo
	XDEF _vdp_spriteMoveToSelected
	XDEF _vdp_spriteHide
	XDEF _vdp_spriteHideSelected
	XDEF _vdp_spriteShow
	XDEF _vdp_spriteShowSelected
	XDEF _vdp_spriteSetFrame
	XDEF _vdp_spriteSetFrameSelected
	XDEF _vdp_spritePreviousFrame
	XDEF _vdp_spritePreviousFrameSelected
	XDEF _vdp_spriteNextFrame
	XDEF _vdp_spriteNextFrameSelected
	XDEF _vdp_spriteAddFrame
	XDEF _vdp_spriteAddFrameSelected
	XDEF _vdp_spriteClearFrames
	XDEF _vdp_spriteClearFramesSelected
	XDEF _vdp_spriteSelect
	XDEF _vdp_bitmapCreateSolidColor
	XDEF _vdp_bitmapCreateSolidColorSelected
	XDEF _vdp_bitmapDraw
	XDEF _vdp_bitmapDrawSelected
	XDEF _vdp_bitmapSendData
	XDEF _vdp_bitmapSendDataSelected
	XDEF _vdp_bitmapSelect
	XDEF _vdp_plotSetOrigin
	XDEF _vdp_plotCircleCircumference
	XDEF _vdp_plotCircleRadius
	XDEF _vdp_plotTriangle
	XDEF _vdp_plotPoint
	XDEF _vdp_plotLineTo
	XDEF _vdp_plotMoveTo
	XDEF _vdp_plot
	XDEF _vdp_plotColour
	XDEF _vdp_clearGraphics
	XDEF _vdp_bgcolour
	XDEF _vdp_fgcolour
	XDEF _vdp_colour
	XDEF _vdp_cursorGoto
	XDEF _vdp_cursorUp
	XDEF _vdp_cursorHome
	XDEF _vdp_cls
	XDEF _vdp_setPaletteColor
	XDEF _vdp_getMode
	XDEF _vdp_mode
	XDEF _write32bit
	XDEF _write16bit
	END
